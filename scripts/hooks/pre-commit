#!/usr/bin/env bash
set -eu

# MCPTOOLS DevOps CLI Pre-commit Hook
# This hook runs Rust quality checks before allowing commits

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration
HOOK_NAME="pre-commit"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
FORCE_MODE=false

# Parse command line arguments
parse_arguments() {
	while [[ $# -gt 0 ]]; do
		case $1 in
		--force | -f)
			FORCE_MODE=true
			shift
			;;
		--help | -h)
			show_usage
			exit 0
			;;
		*)
			log_error "Unknown option: $1"
			show_usage
			exit 1
			;;
		esac
	done
}

# Functions
log_info() {
	echo -e "${BLUE}[${HOOK_NAME}]${NC} $1"
}

log_success() {
	echo -e "${GREEN}[${HOOK_NAME}]${NC} ‚úÖ $1"
}

log_warning() {
	echo -e "${YELLOW}[${HOOK_NAME}]${NC} ‚ö†Ô∏è  $1"
}

log_error() {
	echo -e "${RED}[${HOOK_NAME}]${NC} ‚ùå $1"
}

log_step() {
	echo -e "${BOLD}[${HOOK_NAME}]${NC} üîß $1"
}

# Show usage information
show_usage() {
	echo "MCPTOOLS DevOps CLI Pre-commit Hook"
	echo
	echo "Usage: $0 [options]"
	echo
	echo "Options:"
	echo "  --force, -f    Force run checks on all Rust files (not just staged)"
	echo "  --help, -h     Show this help message"
	echo
	echo "Examples:"
	echo "  $0                    # Normal git hook mode (staged files only)"
	echo "  $0 --force            # Check all Rust files in project"
	echo "  $0 -f                 # Short form of --force"
	echo
	echo "When run normally (as a git hook), only staged .rs files are checked."
	echo "When run with --force, all .rs files in the project are checked."
}

# Check if we're in a Rust project
check_rust_project() {
	if [[ ! -f "$PROJECT_ROOT/Cargo.toml" ]]; then
		log_warning "No Cargo.toml found. Skipping Rust checks."
		exit 0
	fi
}

# Check if cargo is available
check_cargo() {
	if ! command -v cargo >/dev/null 2>&1; then
		log_error "cargo is not installed or not in PATH"
		log_error "Please install Rust: https://rustup.rs/"
		exit 1
	fi
}

# Get list of staged Rust files
get_staged_rust_files() {
	git diff --cached --name-only --diff-filter=ACM | grep '\.rs$' || true
}

# Get list of all Rust files in the project
get_all_rust_files() {
	find "$PROJECT_ROOT" -name "*.rs" -type f | grep -E "(src/|tests/)" | sed "s|^$PROJECT_ROOT/||" || true
}

# Get the appropriate list of Rust files based on mode
get_target_rust_files() {
	if [[ "$FORCE_MODE" == true ]]; then
		get_all_rust_files
	else
		get_staged_rust_files
	fi
}

# Run cargo fmt and auto-fix formatting issues
run_cargo_fmt() {
	log_step "Running cargo fmt..."

	if ! cargo fmt --check >/dev/null 2>&1; then
		log_warning "Code formatting issues found. Auto-fixing..."

		if cargo fmt; then
			if [[ "$FORCE_MODE" == false ]]; then
				# Re-stage formatted files only in git hook mode
				local staged_files
				staged_files=$(get_staged_rust_files)
				if [[ -n "$staged_files" ]]; then
					echo "$staged_files" | xargs git add
					log_success "Code formatted and re-staged"
				else
					log_success "Code formatted"
				fi
			else
				log_success "Code formatted (force mode - files not staged)"
			fi
		else
			log_error "cargo fmt failed"
			return 1
		fi
	else
		log_success "Code formatting is correct"
	fi
}

# Run cargo check
run_cargo_check() {
	log_step "Running cargo check --all-targets..."

	if cargo check --all-targets --quiet; then
		log_success "Cargo check passed"
	else
		log_error "Cargo check failed"
		log_error "Please fix compilation errors before committing"
		return 1
	fi
}

# Run cargo clippy
run_cargo_clippy() {
	log_step "Running cargo clippy -- -D warnings..."

	if cargo clippy --all-targets --quiet -- -D warnings; then
		log_success "Clippy checks passed"
	else
		log_error "Clippy checks failed"
		log_error "Please fix clippy warnings before committing"
		log_info "Tip: Run 'cargo clippy --fix' to auto-fix some issues"
		return 1
	fi
}

# Run cargo machete if available
run_cargo_machete() {
	if command -v cargo-machete >/dev/null 2>&1; then
		log_step "Running cargo machete..."

		if cargo machete; then
			log_success "No unused dependencies found"
		else
			log_warning "Unused dependencies detected"
			log_info "Run 'cargo machete' for details"
			log_info "This is a warning - commit will proceed"
		fi
	fi
}

# Main execution
main() {
	cd "$PROJECT_ROOT"

	# Parse command line arguments first
	parse_arguments "$@"

	if [[ "$FORCE_MODE" == true ]]; then
		log_info "Starting pre-commit checks in FORCE mode (all Rust files)..."
	else
		log_info "Starting pre-commit checks..."
	fi

	# Preliminary checks
	check_rust_project
	check_cargo

	# Check if there are any target Rust files
	local target_rust_files
	target_rust_files=$(get_target_rust_files)

	if [[ -z "$target_rust_files" ]]; then
		if [[ "$FORCE_MODE" == true ]]; then
			log_info "No Rust files found in project. Nothing to check."
		else
			log_info "No staged Rust files found. Skipping Rust checks."
		fi
		exit 0
	fi

	if [[ "$FORCE_MODE" == true ]]; then
		log_info "Found Rust files in project:"
		local file_count
		file_count=$(echo "$target_rust_files" | wc -l | tr -d ' ')
		log_info "Total files to check: $file_count"
		echo "$target_rust_files" | head -10 | sed 's/^/  - /'
		if [[ $file_count -gt 10 ]]; then
			echo "  ... and $((file_count - 10)) more files"
		fi
	else
		log_info "Found staged Rust files:"
		echo "$target_rust_files" | sed 's/^/  - /'
	fi
	echo

	# Run checks in order
	local exit_code=0

	# 1. Format code (auto-fix)
	if ! run_cargo_fmt; then
		exit_code=1
	fi

	# 2. Check compilation
	if ! run_cargo_check; then
		exit_code=1
	fi

	# 3. Run clippy
	if ! run_cargo_clippy; then
		exit_code=1
	fi

	# 4. Check unused dependencies (warning only)
	run_cargo_machete

	# Final result
	if [[ $exit_code -eq 0 ]]; then
		echo
		log_success "All pre-commit checks passed! üéâ"
		log_info "Commit proceeding..."
	else
		echo
		log_error "Pre-commit checks failed! ‚ùå"
		log_error "Commit aborted. Please fix the issues above and try again."
		echo
		log_info "Quick fixes:"
		log_info "  ‚Ä¢ cargo fmt          - Format code"
		log_info "  ‚Ä¢ cargo clippy --fix - Auto-fix clippy issues"
		log_info "  ‚Ä¢ cargo check        - Check compilation"
	fi

	exit $exit_code
}

# Handle Ctrl+C gracefully
trap 'log_warning "Pre-commit hook interrupted"; exit 130' INT

# Run main function
main "$@"
